name: Clone Doku Repository

on:
  schedule:
    - cron: '0 17 * * *'  # Daily sync at 5pm
  workflow_dispatch:  

jobs:
  mirror:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        repos: 
          - { name: 'pcg-gcp/gcp-mco-repo-test-mirror', token: 'GCP_MCO_SOURCE_MIRROR_TOKEN', path: 'source_repo', folder: 'source_content' }
          - { name: 'pcg-gcp/gcp-mco-additional-source-mirror-repo', token: 'GCP_MCO_ADDITIONAL_SOURCE_MIRROR_TOKEN', path: 'source_repo2', folder: 'source_content2' }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.repos.name }}
          token: ${{ secrets[matrix.repos.token] }}
          path: ${{ matrix.repos.path }}
          fetch-depth: 0    # avoid shallow clone

      - name: Checkout target repository
        if: ${{ matrix.repos.name == 'pcg-gcp/gcp-mco-repo-test-mirror' }}
        uses: actions/checkout@v3
        with:
          repository: cw-jimmy-cu/gcp-mco-target-repo-mirror
          token: ${{ secrets.TEST_MCO_TARGET_MIRROR_TOKEN }}
          path: target_repo
          fetch-depth: 0   # avoid shallow clone

      - name: Set up SSH for target repository
        if: ${{ matrix.repos.name == 'pcg-gcp/gcp-mco-repo-test-mirror' }}
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_TARGET }}

      - name: Sync source with target
        if: ${{ matrix.repos.name == 'pcg-gcp/gcp-mco-repo-test-mirror' }}
        run: |
          git config --global user.email "jimmy.cu@pcg.io"
          git config --global user.name "Jimmy Cu"

          # Ensure we are in the right directory
          cd target_repo

          # Loop over all source directories
          for repo in ../source_repo ../source_repo2; do
            folder=$(basename "$repo")
            target_folder="${folder/source_repo/source_content}"

            # Check if the target content directory exists
            if [ ! -d "$target_folder" ]; then
              echo "$target_folder directory does not exist. Using cp to initialize."
              mkdir -p "$target_folder"
              cp -r "$repo"/* "$target_folder/"
            else
              echo "$target_folder directory exists. Using rsync to sync."
              rsync -av --delete "$repo"/ "$target_folder/"
            fi
          done

          # Add changes to git
          git add .
          
          # Commit changes
          git commit -m "Sync with source repositories"
          
          # Push changes
          git push origin main
